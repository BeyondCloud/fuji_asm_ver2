.MODEL   SMALL
;           IDENT   uTV01A           ; This directive is not defined in MASM
                                    ; IDENT directive means IDENTification
                                    ; It is used to declare the program name
  BEL      EQU     07H              ; ASCII Code of BEL (Alarming bell)
  BS       EQU     08H              ; ASCII Code of BS  (Backspace)
  CR       EQU     0DH              ; ASCII Code of CR  (Carriage Return)
  LF       EQU     0AH              ; ASCII Code of LF  (Line Feed)
.STACK  200H
0000	25252048656C6C6F2C20576F726C642120457865637574696F6E207374617274732E2E2E2E070D0A24
   Start1  DB   "%% Hello, World! Execution starts....", BEL, CR, LF, '$'
0029	0029
   size1   DW   $-start1  ;29 00 ,29h = 41 = sizeof start1 string 
002b	25252050726F6772616D2073746F70732E2045786974206E6F7721070D0A24
   Goodbye DB   "%% Program stops. Exit now!",           BEL, CR, LF, '$'
004a	001f
   size2   DW   $-Goodbye
004c	0D0A20202053756D2831202E2E20
    uMSG   DB   CR, LF, "   Sum(1 .. "
005a	
;   uIdgt  BSS  1                   ; 1-Byte buffer to store input value
005a	01
    uIdgt  DB  1
005b	29203D20
           DB   ") = "
005f	0001
    uRval  DW   1
0061	
;   uRval  BSS  2                   ; 2-Byte buffer to store result
0061	0D0A24
           DB   CR, LF, '$'
.CODE
0000	   getDgt  PROC                     ; Subroutine to get a decimal digit
0000	b23f   gLoop:  MOV    DL, '?'
0002	e8	putchr           CALL   putChr
0005	b401           MOV    AH, 01H           ; Get user input with echo
0007	cd21           INT    21H
0009	3c30           CMP    AL, '0'           ; Check for invalid input
000b	7e	gerror           JLE    gError
000d	3c39           CMP    AL, '9'
000f	7f	gerror           JG     gError
0011	8ad0           MOV    DL, AL
0013	2c30           SUB    AL, 48            ; Convert ASCII to decimal binary
0015	c3           RET
0016	b207           MOV    DL, BEL           ; Error alert
0018	e8	putchr           CALL   putChr 
001b	eb	gloop           JMP    gLoop
001d		   getDgt  ENDP                     ; End of Subroutine
001d	   putChr  PROC                     ; Subroutine to display a character
001d	80fa00           CMP    DL, 0             ; character to be displayed
0020	74	nomore           JE     NoMore            ; DL = 00 means end-of-string
0022	b402           MOV    AH, 02H
0024	cd21           INT    21H
0026	c3           RET
0027		   putChr  ENDP                     ; End of Subroutine
0027	   NewLine PROC                     ; Subroutine to start a new line
0027	b20d           MOV    DL, CR
0029	e8	putchr           CALL   putChr
002c	b20a           MOV    DL, LF
002e	e8	putchr           CALL   putChr
0031	c3           RET
0032		   NewLine ENDP                     ; End of Subroutine
0032	   doComp  PROC                     ; Subroutine to compute Sum of 1 .. n
0032	b80000           MOV    AX, 0             ; at call register DL carries n
0035	b600           MOV    DH, 0
0037	83fa0000   doLoop: CMP    DX, 0
003a	7e	dodone           JLE    doDone
003c	03c2           ADD    AX, DX
003e	4a           DEC    DX
003f	eb	doloop           JMP    doLoop
0041	d4           DB     0D4H              ; Define the AAM instruction
0042	0a           DB     00AH
0043	053030           ADD    AX, 3030H         ; Convert decimal binary to ASCII           
0046	c3           RET
0047		   doComp  ENDP                     ; End of Subroutine
0047	   MAIN    PROC
0047	b80000           MOV    AX, @DATA     ; Set up DATA SEGMENT
004a	8ed8           MOV    DS, AX
004c	8d16	start1           LEA    DX, Start1      ; Display program start message
0050	b409           MOV    AH, 09H
0052	cd21           INT    21H
0054	e8	newline   mStart: CALL   NewLine
0057	e8	getdgt           Call   getDgt
005a	8816005a           MOV    uIdgt, DL
005e	8ad0           MOV    DL, AL
0060	e8	docomp           CALL   doComp
0063	86e0           XCHG   AH, AL
0065	a3005f           MOV    uRval, AX
0068	8d16	umsg           LEA    DX, uMSG      ; Display result message
006c	b409           MOV    AH, 09H
006e	cd21           INT    21H
0070	e8	newline           CALL   NewLine
0073	8d16	goodbye           LEA    DX, Goodbye       ; Display goodbye message
0077	b409           MOV    AH, 09H
0079	cd21           INT    21H
007b	b84c00           MOV    AX,4C00H          ; Program exits using DOS service
007e	cd21           INT    21H
0080		   MAIN    ENDP
0080		   END 
