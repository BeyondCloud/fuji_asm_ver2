.MODEL   SMALL
;           IDENT   uTV01A           ; This directive is not defined in MASM
                                    ; IDENT directive means IDENTification
                                    ; It is used to declare the program name
  BEL      EQU     07H              ; ASCII Code of BEL (Alarming bell)
  BS       EQU     08H              ; ASCII Code of BS  (Backspace)
  CR       EQU     0DH              ; ASCII Code of CR  (Carriage Return)
  LF       EQU     0AH              ; ASCII Code of LF  (Line Feed)
.STACK  200H
0000	25252048656C6C6F2C20576F726C642120457865637574696F6E207374617274732E2E2E2E070D0A24
   Start1  DB   "%% Hello, World! Execution starts....", BEL, CR, LF, '$'
0029	0029
   size1   DW   $-start1  ;29 00 ,29h = 41 = sizeof start1 string 
002b	25252050726F6772616D2073746F70732E2045786974206E6F7721070D0A24
   Goodbye DB   "%% Program stops. Exit now!",           BEL, CR, LF, '$'
004a	001f
   size2   DW   $-Goodbye
004c	0D0A20202053756D2831202E2E20
    uMSG   DB   CR, LF, "   Sum(1 .. "
005a	
;   uIdgt  BSS  1                   ; 1-Byte buffer to store input value
005a	01
    uIdgt  DB  1
005b	29203D20
           DB   ") = "
005f	0001
    uRval  DW   1
0061	
;   uRval  BSS  2                   ; 2-Byte buffer to store result
0061	0D0A24
           DB   CR, LF, '$'
.CODE
0000	   getDgt  PROC                     ; Subroutine to get a decimal digit
0000	b23f           CALL   putChr
0002	b401           MOV    AH, 01H           ; Get user input with echo
0004	cd21           INT    21H
0006	3c30           CMP    AL, '0'           ; Check for invalid input
0008	7e	gerror           JLE    gError
000a	3c39           CMP    AL, '9'
000c	7f	gerror           JG     gError
000e	8ad0           MOV    DL, AL
0010	2c30           SUB    AL, 48            ; Convert ASCII to decimal binary
0012	c3           RET
0013	b207           MOV    DL, BEL           ; Error alert
0015	e8	putchr           CALL   putChr 
0018	eb	gloop           JMP    gLoop
001a		   getDgt  ENDP                     ; End of Subroutine
001a	   putChr  PROC                     ; Subroutine to display a character
001a	80fa00           CMP    DL, 0             ; character to be displayed
001d	74	nomore           JE     NoMore            ; DL = 00 means end-of-string
001f	b402           MOV    AH, 02H
0021	cd21           INT    21H
0023	c3           RET
0024		   putChr  ENDP                     ; End of Subroutine
0024	   NewLine PROC                     ; Subroutine to start a new line
0024	b20d           MOV    DL, CR
0026	e8	putchr           CALL   putChr
0029	b20a           MOV    DL, LF
002b	e8	putchr           CALL   putChr
002e	c3           RET
002f		   NewLine ENDP                     ; End of Subroutine
002f	   doComp  PROC                     ; Subroutine to compute Sum of 1 .. n
002f	b80000           MOV    AX, 0             ; at call register DL carries n
0032	b600           MOV    DH, 0
0034	83fa0000           JLE    doDone
0037	03c2           ADD    AX, DX
0039	4a           DEC    DX
003a	eb	doloop           JMP    doLoop
003c	d4           DB     0D4H              ; Define the AAM instruction
003d	0a           DB     00AH
003e	053030           ADD    AX, 3030H         ; Convert decimal binary to ASCII           
0041	c3           RET
0042		   doComp  ENDP                     ; End of Subroutine
0042	   MAIN    PROC
0042	b80000           MOV    AX, @DATA     ; Set up DATA SEGMENT
0045	8ed8           MOV    DS, AX
0047	8d16	start1           LEA    DX, Start1      ; Display program start message
           MOV    AH, 09H
004b	b409           INT    21H
004d	cd21           Call   getDgt
004f	e8	newline           MOV    uIdgt, DL
0052	8816005a           MOV    DL, AL
0056	8ad0           CALL   doComp
0058	e8	docomp           XCHG   AH, AL
005b	86e0           MOV    uRval, AX
005d	a3005f           LEA    DX, uMSG      ; Display result message
0060	8d16	umsg           MOV    AH, 09H
           INT    21H
0064	b409           CALL   NewLine
0066	cd21           LEA    DX, Goodbye       ; Display goodbye message
0068	e8	newline           MOV    AH, 09H
006b	8d16	goodbye           INT    21H
           MOV    AX,4C00H          ; Program exits using DOS service
006f	b409           INT    21H
0071	cd21   MAIN    ENDP
0073	b84c00   END 
